#include<iostream>
using namespace std;
struct bstnode{
    int data;
    bstnode* left;
    bstnode* right;
};
bstnode* root=nullptr;
bstnode* newNode(int data){
    bstnode* node=new bstnode();
    node->data=data;
    node->left=node->right=nullptr;
    return node;
}
void insert(int data){
    if(root==nullptr){
        root=newNode(data);
        return;
    }
    bstnode* temp=root;
    while(temp!=NULL){
        if(data<=temp->data){
            if(temp->left==nullptr){
                temp->left=newNode(data);
                return;
            }
            else
            temp=temp->left;
        }
        else{
            if(temp->right==nullptr){
                temp->right=newNode(data);
                return;
            }
            else
            temp=temp->right;
        }
    }
}
bool search(int num){
    bstnode* temp=root;
    while(temp!=nullptr){
    if(temp==nullptr)
    return false;
    
    else if(temp->data==num)
    return true;
    
    else if(num<=temp->data)
    temp=temp->left;
    
    else
    temp=temp->right;
    }
}
int main(){
    insert(15);
    insert(10);
    insert(20);
    insert(12);
    insert(25);
    int num;
    cout<<"Enter number to be searched: ";
    cin>>num;
    if(search(num))
    cout<<"\nFound "<<num;
    else
    cout<<"\nNot in Tree!";
}

/*
Enter number to be searched: 25
Found 25

Enter number to be searched: 2
Not in Tree!
*/
